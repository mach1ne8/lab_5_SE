from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import types
import pandas as pd
from datetime import datetime, timedelta


def parse_schedule(week_type: str):
    file_schedule = '2_–∫—É—Ä—Å_—á–µ—Ç–Ω–∞—è.xlsx' if week_type == "2 –Ω–µ–¥." else '2_–∫—É—Ä—Å_–Ω–µ—á–µ—Ç–Ω–∞—è.xlsx'
    return pd.read_excel(file_schedule, sheet_name=None)


def get_course_kb() -> InlineKeyboardBuilder:
    builder = InlineKeyboardBuilder()
    for i in range(1, 5):
        builder.row(
            types.InlineKeyboardButton(text=str(i), callback_data=f"course_{i}")
        )
    builder.adjust(1)
    return builder.as_markup()


def get_group_kb(course: str = '', page: int = 1) -> InlineKeyboardBuilder:
    builder = InlineKeyboardBuilder()
    groups = ['–ê', '–ï–Ω', '–û', '–ö', '–ö—Å', '–¶', '–¢–º', '–ü—Ä', '–≠', '–ò', '–ù', '–§', '–ü', '–≠–∫']

    if page == 1:
        for group in groups[:10]:
            builder.button(
                text=group,
                callback_data=f'group_{group}_{course}'
            )
        builder.adjust(2)
        builder.row(
            types.InlineKeyboardButton(text='‚û°Ô∏è', callback_data=f'next_page_2_{course}')
        )
        builder.row(
            types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='prev_crs')
        )
    elif page == 2:
        for group in groups[10:]:
            builder.button(
                text=group,
                callback_data=f'group_{group}_{course}'
            )

        builder.adjust(1)
        builder.row(
            types.InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data=f'next_page_1_{course}')
        )

    return builder.as_markup()


def get_number_group_kb(group: str, course: str) -> InlineKeyboardBuilder:
    builder = InlineKeyboardBuilder()
    new_group_number = {
        "–ü—Ä": [course + '0', course + '1', course + '2', course + '4'],
        "–û": [course + '3', course + '5', course + '6', course + '7', course + '8', course + '9'],
        "–ï–Ω": [course + '1'],
        "–ö": [course + '3', course + '5', course + '7'],
        "–ö—Å": [course + '0', course + '3', course + '4', course + '6'],
        "–¢–º": [course + '1', course + '2', course + '3', course + '9'],
        "–¶": [course + '1', course + '2'],
        "–≠": [course + '1', course + '3', course + '4', course + '5', course + '6', course + '8'],
        "–ò": [course + '1', course + '2', course + '3', course + '4', course + '5', course + '7'],
        "–ê": [course + '1', course + '2'],
        "–ù": [course + '0', course + '1', course + '2', course + '3', course + '4',
              course + '5', course + '6', course + '7', course + '8'],
        "–§": [course + '0', course + '2', course + '4', course + '5', course + '6', course + '7'],
        "–ü": [course + '0', course + '1', course + '2', course + '3', course + '4', course + '5',
              course + '6', course + '8'],
        "–≠–∫": [course + '1']
    }

    buttons = new_group_number.get(group, [])
    current_date = datetime.now().strftime('%d.%m.%Y')
    day_index = datetime.now().isocalendar()[2] - 1
    for button in buttons:
        builder.button(
            text=button,
            callback_data=f"number_{group}-{button}_{day_index}_{current_date}"
        )
    builder.adjust(1)

    builder.row(
        types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data=f'prev_grp_{course}'),
    )
    return builder.as_markup()


def create_navigation_buttons(current_day_index, group_name, current_day):
    buttons = InlineKeyboardBuilder()

    buttons.row(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è",
                                   callback_data=f"prev_{group_name}_{current_day_index}_{current_day.strftime('%d.%m.%Y')}"),
        types.InlineKeyboardButton(text="‚û°Ô∏è",
                                   callback_data=f"next_{group_name}_{current_day_index}_{current_day.strftime('%d.%m.%Y')}")
    )

    buttons.row(
        types.InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è",
                                   callback_data=f"today_{group_name}_{current_day_index}_{current_day.strftime('%d.%m.%Y')}")
    )

    buttons.row(
        types.InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è",
                                   callback_data=f"week_{group_name}")
    )

    buttons.row(
        types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                                   callback_data=f"prev_number_group_{group_name}")
    )
    return buttons.as_markup()


def update_date(action, current_date):
    if action == "prev":
        current_date -= timedelta(days=1)
    elif action == "next":
        current_date += timedelta(days=1)
    elif action == 'today':
        current_date = datetime.now()
    elif action == 'week':


    day_index = current_date.weekday()
    current_week = current_date.isocalendar()[1] + 1
    week_type = "2 –Ω–µ–¥." if current_week % 2 == 0 else "1 –Ω–µ–¥."

    return current_date, day_index, week_type


def parse_date(date_str):
    return datetime.strptime(date_str, "%d.%m.%Y")


def format_date_russian(current_date):
    month_cases = {
        "—è–Ω–≤–∞—Ä—å": "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—å": "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç": "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—å": "–∞–ø—Ä–µ–ª—è",
        "–º–∞–π": "–º–∞—è", "–∏—é–Ω—å": "–∏—é–Ω—è", "–∏—é–ª—å": "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç": "–∞–≤–≥—É—Å—Ç–∞",
        "—Å–µ–Ω—Ç—è–±—Ä—å": "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—å": "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—å": "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—å": "–¥–µ–∫–∞–±—Ä—è"
    }

    day = current_date.day
    month_nominative = current_date.strftime("%B").lower()

    month = month_cases.get(month_nominative, month_nominative)

    return f"{day} {month}"


def get_group_schedule(group_name: str, day_index: int, week_type: str, current_date: datetime, user: str):
    day_translation = {
        'monday': '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'tuesday': '–≤—Ç–æ—Ä–Ω–∏–∫', 'wednesday': '—Å—Ä–µ–¥–∞',
        'thursday': '—á–µ—Ç–≤–µ—Ä–≥', 'friday': '–ø—è—Ç–Ω–∏—Ü–∞', 'saturday': '—Å—É–±–±–æ—Ç–∞',
        'sunday': '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }

    all_schedules = parse_schedule(week_type)

    if group_name not in all_schedules:
        return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    if not isinstance(all_schedules, dict):
        return "–û—à–∏–±–∫–∞: —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å."

    days_in_order = list(day_translation.values())

    if day_index < 0 or day_index >= len(days_in_order):
        return "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–Ω—è –Ω–µ–¥–µ–ª–∏."

    current_day = days_in_order[day_index]
    next_day = days_in_order[(day_index + 1) % len(days_in_order)]

    group_schedule = all_schedules.get(group_name)

    start_idx = group_schedule[group_schedule['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'] == current_day].index
    if start_idx.empty:
        return f"{user}, —Å–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –∏–¥–∏ –æ—Ç–¥–æ—Ö–Ω–∏;)\n\n–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç^^"
    start_idx = start_idx[0]

    end_idx = group_schedule[group_schedule['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'] == next_day].index
    end_idx = end_idx[0] if not end_idx.empty else None

    day_schedule = group_schedule.loc[start_idx:end_idx].iloc[:-1] if end_idx else group_schedule.loc[start_idx:]

    if any(day_schedule['–ü—Ä–µ–¥–º–µ—Ç'] == "–í—ã—Ö–æ–¥–Ω–æ–π"):
        return (f"üóì<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {group_name}</b>:\n\n{current_day.capitalize()} | {current_date} | {week_type}\n\n"
                f"<i>–°–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç</i>ü•∞")

    schedule_text = "\n\n".join(
        f"{index + 1}. <b>{row['–ü—Ä–µ–¥–º–µ—Ç']}</b>\n"
        f"    {row['–í—Ä–µ–º—è']}\n"
        f"    {row['–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è'] if pd.notna(row['–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è']) else ''}, "
        f"–∞—É–¥. {row['–ê—É–¥–∏—Ç–æ—Ä–∏—è'] if pd.notna(row['–ê—É–¥–∏—Ç–æ—Ä–∏—è']) else ''}"
        for index, (_, row) in enumerate(day_schedule.iterrows())
        if pd.notna(row['–ü—Ä–µ–¥–º–µ—Ç'])  # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º –ø—Ä–µ–¥–º–µ—Ç–æ–º
    )

    location = [
        row['–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ'] if pd.notna(row['–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ']) else '‚Äî'
        for _, row in day_schedule.iterrows()
    ]

    if len(location) > 2:
        location_text = location[1]
    elif len(location) == 2:
        location_text = location[-1] if location[0] == '‚Äî' else location[0]
    else:
        location_text = location[0]

    return (f"üóì<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {group_name}</b>:\n\n{current_day.capitalize()} | {current_date} | "
            f"{week_type}\n\n{schedule_text}\n\nüìç<b>–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>:\n     {location_text}")
